---
name: CI/CD Pipeline

on: # yamllint disable-line rule:truthy
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Еженедельные проверки зависимостей по понедельникам в 02:00 UTC
    - cron: "0 2 * * 1"
  workflow_dispatch:
  # Возможность ручного запуска

# Настройки для повышения производительности
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ========================
  # ЭТАП 1: ЛИНТИНГ И ПРОВЕРКА КАЧЕСТВА КОДА
  # ========================
  lint:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: 📦 Install dependencies
        run: |
          npm install
          pip install -r requirements.txt
          pip install flake8 autopep8 yamllint

      - name: 🔍 Lint code (JS, Python, HTML, CSS, JSON, YAML)
        run: |
          npm run lint:ci

      - name: 🎨 Check code formatting
        run: |
          npm run format:check

  # ========================
  # ЭТАП 2: КРОССБРАУЗЕРНОЕ ТЕСТИРОВАНИЕ
  # ========================
  test:
    name: 🧪 Cross-Browser Tests
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium]
        include:
          - browser: chromium
            display_name: "Chrome (CI Optimized)"

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
          cache: "pip"

      - name: 📦 Install dependencies
        run: |
          npm install
          pip install -r requirements.txt

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: 🚀 Start development server
        run: |
          python3 -m http.server 5500 &
          sleep 5
          curl -f http://localhost:5500 || exit 1

      - name: 🧪 Run Playwright tests (${{ matrix.display_name }})
        run: >
          npx playwright test
          --config=playwright-ci.config.js
          --project=chromium-ci

      - name: 🧪 Run Python tests (${{ matrix.display_name }})
        run: >
          python -m pytest -c pytest-ci.ini
          tests/test_index_page_async.py -v

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: test-results-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/
            pytest-report-${{ matrix.browser }}.html
          retention-days: 7

  # ========================
  # ЭТАП 3: ПРОИЗВОДИТЕЛЬНОСТЬ И ДОСТУПНОСТЬ
  # ========================
  lighthouse:
    name: 🚨 Lighthouse Audit
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm install

      - name: 🚀 Start development server
        run: |
          python -m http.server 5500 &
          sleep 5

      - name: 🚨 Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun || echo "Lighthouse warnings detected"
        env:
          LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.sha }}
          LHCI_BUILD_CONTEXT__COMMIT_TIME: >
            ${{ github.event.head_commit.timestamp }}

      - name: 📊 Upload Lighthouse results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 7

  # ========================
  # ЭТАП 4: БЕЗОПАСНОСТЬ
  # ========================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm install

      - name: 🔍 Audit npm packages
        run: npm audit --audit-level=high

      - name: 🔒 CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: 🔒 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # ========================
  # ЭТАП 5: ДЕПЛОЙ В GITHUB PAGES
  # ========================
  deploy:
    name: 🚀 Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [test, lighthouse, security]
    # ВРЕМЕННО ОТКЛЮЧЕНО: GitHub Pages не настроен
    if: false # Изменить на основное условие после настройки Pages
    # if: >
    #   github.ref == 'refs/heads/main' &&
    #   github.event_name == 'push' &&
    #   github.repository == 'w111/AI-Pages'

    # Специальные разрешения для GitHub Pages
    permissions:
      contents: read
      pages: write
      id-token: write

    # Защита от одновременных деплоев
    concurrency:
      group: "pages"
      cancel-in-progress: false

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: 📦 Install dependencies
        run: npm install

      - name: 🔧 Setup Pages
        uses: actions/configure-pages@v4

      - name: 🔍 Debug Pages Configuration
        run: |
          echo "🔍 Debugging GitHub Pages setup..."
          echo "Repository: ${{ github.repository }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "SHA: ${{ github.sha }}"
          echo "Ref: ${{ github.ref }}"
          echo "Event: ${{ github.event_name }}"

      - name: 📁 Prepare deployment artifacts
        run: |
          # Создаем директорию для артефактов
          mkdir -p deployment

          # Копируем только продакшн файлы
          cp -r *.html deployment/ || true

          # Создаем .nojekyll для правильной работы GitHub Pages
          touch deployment/.nojekyll

          # Создаем 404.html если его нет
          if [ ! -f deployment/404.html ]; then
            cp deployment/index.html deployment/404.html
          fi

          # Убеждаемся что тесты не попали в деплой
          echo "📋 Содержимое деплоя:"
          ls -la deployment/

      - name: 📤 Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "./deployment"

      - name: 🔍 Pre-deployment Check
        run: |
          echo "🔍 Pre-deployment diagnostics..."
          echo "Current working directory: $(pwd)"
          echo "Deployment directory contents:"
          ls -la deployment/ || echo "❌ Deployment directory not found"
          echo "GitHub context:"
          echo "  Repository: ${{ github.repository }}"
          echo "  Actor: ${{ github.actor }}"
          token_status="${{ github.token && 'available' || 'missing' }}"
          echo "  Token permissions: pages=$token_status"

      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v3
        timeout-minutes: 10

      - name: 🎉 Deployment Success
        run: |
          echo "✅ Successfully deployed to GitHub Pages!"
          echo "🌐 Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "📅 Deployment ID: ${{ steps.deployment.outputs.deployment_id }}"
          echo "📋 Run ID: ${{ github.run_id }}"

  # ========================
  # ЭТАП 6: УВЕДОМЛЕНИЯ И ОТЧЕТЫ
  # ========================
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 📊 Generate deployment report
        run: |
          echo "## 🚀 Deployment Report" >> $GITHUB_STEP_SUMMARY
          echo "| Stage | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint | ${{ needs.lint.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Lighthouse | ${{ needs.lighthouse.result }} |" >> \
            $GITHUB_STEP_SUMMARY
          echo "| Security | ${{ needs.security.result }} |" >> \
            $GITHUB_STEP_SUMMARY
          echo "| Deploy | ${{ needs.deploy.result }} |" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ **Deployment completed successfully!**" >> \
              $GITHUB_STEP_SUMMARY
            OWNER="${{ github.repository_owner }}"
            REPO="${{ github.event.repository.name }}"
            SITE_URL="https://$OWNER.github.io/$REPO"
            echo "🌐 **Live site:** $SITE_URL" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Deployment failed. Check the logs above.**" >> \
              $GITHUB_STEP_SUMMARY
          fi
